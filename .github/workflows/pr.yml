name: CI

on: [pull_request, push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    #- name: Checkout Project
    #  uses: actions/checkout@v1
    - name: Checkout
      run: |
        git clone https://github.com/lburgazzoli/apache-camel-k
        cd apache-camel-k
        git checkout -b flags origin/flags
    - name: Info
      run: |
        ls -lart
    - name: Set Up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Set Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.13.x
    - name: Get KinD (Kubernetes in Docker)
      uses: engineerd/setup-kind@v0.1.0
      with:
        version: v0.6.1
        skipClusterCreation: "true"
    - name: Start KinD Cluster with Internal Registry
      run: |
        CLUSTER_NAME="kind"
        REGISTRY_CONTAINER_NAME='kind-registry'
        REGISTRY_PORT='5000'
        docker run -d -p "${REGISTRY_PORT}:5000" --restart=always --name "${REGISTRY_CONTAINER_NAME}" registry:2
        REGISTRY_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress }}' "${REGISTRY_CONTAINER_NAME}")
        cat <<EOF | kind create cluster --config=-
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        containerdConfigPatches: 
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."${REGISTRY_IP}:${REGISTRY_PORT}"]
            endpoint = ["http://${REGISTRY_IP}:${REGISTRY_PORT}"]
        EOF
        for node in $(kind get nodes --name ${CLUSTER_NAME}); do
          docker exec "${node}" sh -c "echo $(docker inspect --format '{{.NetworkSettings.IPAddress }}' "${REGISTRY_CONTAINER_NAME}") registry >> /etc/hosts"
        done
    - name: Info
      run: |
        kubectl cluster-info
        kubectl describe nodes
    - name: Run IT
      run: |
        echo "Build project"
        make build-kamel
        echo "Adding maven artifacts to the image context"
        make PACKAGE_ARTIFACTS_STRATEGY=download package-artifacts
        echo "Copying binary file to docker dir"
        mkdir -p ./build/_output/bin
        cp ./kamel ./build/_output/bin/
        echo "Building the images"
        export IMAGE=docker.io/apache/camel-k:$(make version)
        docker build -t "${IMAGE}" -f build/Dockerfile .
        echo "installing camel k cluster resources"
        ./kamel install --cluster-setup
        # Compute registry parameters
        CAMEL_K_REGISTRY=$(docker inspect --format '{{.NetworkSettings.IPAddress }}' "kind-registry")
        echo "Using registry ${CAMEL_K_REGISTRY}:5000"
        export KAMEL_INSTALL_REGISTRY=${CAMEL_K_REGISTRY}:5000
        export KAMEL_INSTALL_REGISTRY_INSECURE=true
        # Then run integration tests
        make test-integration
